/**
 * the base mining class for the master
 */

#ifndef MINER_H_
#define MINER_H_

#include "Pattern.h"
#include "CLMap.h"

class Miner {
private:
    CLMap processed;
    bool *available_worker;

protected:
    //expected patterns generated by an approximate miner. These patterns follow the same as the exact ones.
    //it is used to have more candidates when there are not enough candidates to make workers busy.
    vector<CLMap *> *expected_frequent_patterns = 0;
    vector<CLMap *> *expected_infrequent_patterns = 0;
    map<int, map<int, set<int>>> frequent_patterns_domain;
    vector<Pattern *> frequent_pattern_vec;

    GraphX *graph = 0;
    int support;
    //frequent edges
    CLMap frequent_edges;
    map<string, map<int, set<int>>> freq_pattern_pairs;
    map<int, set<int>> freq_edge_pairs;
    map<string, long long> is_freqtimes;
    set<string> cl_set;

    //frequent patterns sorted in a vector, nth element in the vector is hash map of all patterns having n edges
    //each hashmap is keyed by the canonical form of the value graph (pattern)
    vector<CLMap *> frequent_patterns;
    vector<CLMap *> infrequent_patterns;
    vector<CLMap *> candidates;
    map<int, Pattern *> currently_checking;

    void print(vector<CLMap *> &);
    void remove_pattern(Pattern *pattern, vector<CLMap *> &data);

public:
    static int num_is_freq_calls;
    static int num_freqs;
    static int num_infreq;

    Miner();

    ~Miner();

    void init_mining(string, int, int, int);

    void start_mining(int);

    void load_graph(string base_name, int graph_type, int support, CLMap &freq_edges);

    void load_graph_with_pairs(string base_name, int graph_type, int support, CLMap &freq_edges, int seed_node_id);

    void print_result();

    void print_candidates();

    int get_support() { return support; }

    void set_support(int support) { this->support = support; }

    CLMap &get_frequent_edges() { return frequent_edges; }

    void set_frequent_edges(CLMap &freqEdges);

    void extend_freq_edges();

    vector<CLMap *> *get_frequent_patterns() { return &frequent_patterns; }

    vector<CLMap *> *get_infrequent_patterns() { return &infrequent_patterns; }

    void set_expected_patterns(vector<CLMap *> *ex_freq_patt, vector<CLMap *> *ex_infreq_patt) {
        expected_frequent_patterns = ex_freq_patt;
        expected_frequent_patterns->at(1)->clear();
        expected_infrequent_patterns = ex_infreq_patt;
    }
};

#endif /* MINER_H_ */
